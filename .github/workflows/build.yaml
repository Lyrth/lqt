name: Build


on: 
  workflow_dispatch:
    inputs:
      use-build-cache:
        type: boolean
        default: 'false'
        description: Use previous cached build (if it exists)


jobs:
  publish:
    runs-on: windows-latest
    permissions:
      # Token permission for release uploading
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # Qt installation 
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: '${{ github.workspace }}/qt/'
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          install-deps: 'true'
          modules: 'qtscript qtwebengine'
          dir: '${{ github.workspace }}/qt/'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      # Env setup
      - name: Run MSVC VsDevCmd
        uses: ilammy/msvc-dev-cmd@v1

      # Building LuaJIT
      - name: Build LuaJIT
        working-directory: ./modules/LuaJIT/src
        shell: cmd
        run: call msvcbuild.bat

      # Building deployment helper
      - name: Build deployment helper
        working-directory: ./deployhelper
        shell: cmd
        run: |
          mkdir build
          cmake -A x64 -H. -Bbuild -Wno-dev
          cmake --build build --target ALL_BUILD --config Release -j4

      # Building main
      - name: Get Luvi exports and DLDLL libraries
        shell: bash
        run: |
          curl -L --retry 5 --retry-max-time 30 -o luvi.lib https://github.com/luvit/luvi/releases/latest/download/luvi-regular-Windows-amd64.lib
          curl -L --retry 5 --retry-max-time 30 -o luvi_renamed.lib https://github.com/luvit/luvi/releases/latest/download/luvi_renamed-regular-Windows-amd64.lib

      - name: Make build directory
        shell: bash
        run: mkdir build

      - name: Cache build
        id: cache-build
        if: inputs.use-build-cache == 'true'
        uses: actions/cache@v2
        with:
          path: '${{ github.workspace }}/build/'
          key: ${{ runner.os }}-BuildCache

      - name: Run cmake and build
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' || inputs.use-build-cache != 'true' }}
        shell: cmd
        run: |
          cmake -A x64 -H. -Bbuild -Wno-dev
          cmake --build build --target ALL_BUILD --config Release -j4

      # Qt deployment
      - name: Make directory structure and copy deploy helper to target
        shell: cmd
        run: |
          mkdir build\lib\Release\bin
          mkdir build\lib\Release\plugins
          mkdir build\lib\Release\licenses
          copy deployhelper\build\Release\lqtEmpty.exe build\lib\Release\plugins\

      - name: Run windeployqt to deploy Qt dependencies
        working-directory: ./build/lib/Release/plugins
        shell: cmd
        run: |
          windeployqt --release --force --no-patchqt --no-compiler-runtime --no-translations lqtEmpty.exe
          del lqtEmpty.exe
          move resources ..
          move translations ..
          move *.dll ..\bin

      - name: Copy licenses 
        shell: cmd
        run: |
          curl -L --retry 5 --retry-max-time 30 -o LICENSE_luvi.txt https://github.com/luvit/luvi/raw/master/LICENSE.txt
          curl -L --retry 5 --retry-max-time 30 -o LICENSE_qt.txt https://code.qt.io/cgit/qt/qt5.git/plain/LICENSE.LGPLv3?h=5.15.2
          copy LICENSE_luvi.txt build\lib\Release\licenses\LICENSE_luvi.txt
          copy LICENSE_qt.txt build\lib\Release\licenses\LICENSE_qt.txt

      # Releasing
      - name: Get current short commit hash
        id: vars
        shell: bash
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d.%H:%M')"
          echo "::set-output name=commit_hash::$(git rev-parse HEAD)"
          echo "::set-output name=commit_hash_short::$(git rev-parse --short HEAD)"

      - name: Archive output into zip
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: 'zip'
          filename: '${{ github.workspace }}/lqt-${{ steps.vars.outputs.commit_hash_short }}-${{ runner.os }}-${{ runner.arch }}.zip'
          directory: 'build/lib/Release'
          exclusions: '*.exp *.lib'

      - name: Upload Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'lqt-${{ steps.vars.outputs.commit_hash_short }}-${{ runner.os }}-${{ runner.arch }}.zip'
          tag: Build.${{ steps.vars.outputs.date }}
          commit: ${{ steps.vars.outputs.commit_hash }}
          body: Release for Windows x64, packaged with Qt dependencies.

      - name: Done.
        run: echo "Done."
